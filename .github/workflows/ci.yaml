name: Push Docker image to Docker Hub

on:
  pull_request:
    branches:
      - main

jobs:
  # image-build-and-push:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     image_tag: ${{ steps.step_output.outputs.image_tag }}
  #   steps:
  #   - name: Check out the repo
  #     uses: actions/checkout@v2
    
  #   - name: Set image path, name and tag
  #     run: |
  #       IMAGE_PATH=${{ secrets.DOCKER_USERNAME }}/learn-ml
  #       IMAGE_TAG=${{ github.sha }}
  #       echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  #       echo "DOCKER_BASE=$IMAGE_PATH" >> $GITHUB_ENV
  #       echo "DOCKER_TAG=$IMAGE_PATH:$IMAGE_TAG" >> $GITHUB_ENV

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v1

  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Cache Docker layers
  #     uses: actions/cache@v2
  #     with:
  #       path: /tmp/.buildx-cache
  #       key: ${{ runner.os }}-buildx-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v2
  #     with:
  #       context: .
  #       file: ./ci-config/Dockerfile
  #       push: true
  #       tags: |
  #           ${{ env.DOCKER_TAG }}
  #           "${{ env.DOCKER_BASE }}:latest"
  #       cache-from: type=local,src=/tmp/.buildx-cache
  #       cache-to: type=local,dest=/tmp/.buildx-cache
    
  #   - name: Set the output value
  #     id: step_output
  #     run: |
  #       echo "$DOCKER_TAG"
  #       echo "${{ env.DOCKER_BASE }}:latest"
  #       echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  infra-setup:
    runs-on: ubuntu-latest
    # needs: 
    #   - image-build-and-push
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # - run: |
      #     echo ${{ needs.image-build-and-push.outputs.image_tag }}

      - uses: hashicorp/setup-terraform@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: githubsession
          aws-region: us-east-1

      - name: Terraform init
        run: terraform init -upgrade=true -reconfigure -compact-warnings
      - name: Terraform Plan
        working-directory: infra-as-code
        env:
          TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
          TF_VAR_public_subnet_ids: ${{ secrets.PUBLIC_SUBNET_IDS }}
          TF_VAR_allowed_ips: ${{ secrets.ALLOWED_IPS }}
          TF_VAR_image_path: ${{ secrets.IMAGE_PATH }}
          TF_VAR_image_tag: latest
        run: |
          terraform plan -out="${{ runner.temp }}/plan.changes" -input=false
